//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Workstation.WordServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Word", Namespace="http://schemas.datacontract.org/2004/07/WordServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class Word : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WordServiceReference.IWordService")]
    public interface IWordService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordService/GetWordsCount", ReplyAction="http://tempuri.org/IWordService/GetWordsCountResponse")]
        int GetWordsCount(bool isMain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordService/GetWordsCount", ReplyAction="http://tempuri.org/IWordService/GetWordsCountResponse")]
        System.Threading.Tasks.Task<int> GetWordsCountAsync(bool isMain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordService/GetWord", ReplyAction="http://tempuri.org/IWordService/GetWordResponse")]
        Workstation.WordServiceReference.Word GetWord(int i);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordService/GetWord", ReplyAction="http://tempuri.org/IWordService/GetWordResponse")]
        System.Threading.Tasks.Task<Workstation.WordServiceReference.Word> GetWordAsync(int i);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordService/InsertWord", ReplyAction="http://tempuri.org/IWordService/InsertWordResponse")]
        int InsertWord(string word, bool isMain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordService/InsertWord", ReplyAction="http://tempuri.org/IWordService/InsertWordResponse")]
        System.Threading.Tasks.Task<int> InsertWordAsync(string word, bool isMain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordService/UpdateWord", ReplyAction="http://tempuri.org/IWordService/UpdateWordResponse")]
        void UpdateWord(int id, string word, bool isMain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordService/UpdateWord", ReplyAction="http://tempuri.org/IWordService/UpdateWordResponse")]
        System.Threading.Tasks.Task UpdateWordAsync(int id, string word, bool isMain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordService/DeleteWord", ReplyAction="http://tempuri.org/IWordService/DeleteWordResponse")]
        void DeleteWord(int id, bool isMain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordService/DeleteWord", ReplyAction="http://tempuri.org/IWordService/DeleteWordResponse")]
        System.Threading.Tasks.Task DeleteWordAsync(int id, bool isMain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordService/MoveFromSuggestions", ReplyAction="http://tempuri.org/IWordService/MoveFromSuggestionsResponse")]
        void MoveFromSuggestions(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordService/MoveFromSuggestions", ReplyAction="http://tempuri.org/IWordService/MoveFromSuggestionsResponse")]
        System.Threading.Tasks.Task MoveFromSuggestionsAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordService/GetRandomWord", ReplyAction="http://tempuri.org/IWordService/GetRandomWordResponse")]
        string GetRandomWord();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordService/GetRandomWord", ReplyAction="http://tempuri.org/IWordService/GetRandomWordResponse")]
        System.Threading.Tasks.Task<string> GetRandomWordAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWordServiceChannel : Workstation.WordServiceReference.IWordService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WordServiceClient : System.ServiceModel.ClientBase<Workstation.WordServiceReference.IWordService>, Workstation.WordServiceReference.IWordService {
        
        public WordServiceClient() {
        }
        
        public WordServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WordServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WordServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WordServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int GetWordsCount(bool isMain) {
            return base.Channel.GetWordsCount(isMain);
        }
        
        public System.Threading.Tasks.Task<int> GetWordsCountAsync(bool isMain) {
            return base.Channel.GetWordsCountAsync(isMain);
        }
        
        public Workstation.WordServiceReference.Word GetWord(int i) {
            return base.Channel.GetWord(i);
        }
        
        public System.Threading.Tasks.Task<Workstation.WordServiceReference.Word> GetWordAsync(int i) {
            return base.Channel.GetWordAsync(i);
        }
        
        public int InsertWord(string word, bool isMain) {
            return base.Channel.InsertWord(word, isMain);
        }
        
        public System.Threading.Tasks.Task<int> InsertWordAsync(string word, bool isMain) {
            return base.Channel.InsertWordAsync(word, isMain);
        }
        
        public void UpdateWord(int id, string word, bool isMain) {
            base.Channel.UpdateWord(id, word, isMain);
        }
        
        public System.Threading.Tasks.Task UpdateWordAsync(int id, string word, bool isMain) {
            return base.Channel.UpdateWordAsync(id, word, isMain);
        }
        
        public void DeleteWord(int id, bool isMain) {
            base.Channel.DeleteWord(id, isMain);
        }
        
        public System.Threading.Tasks.Task DeleteWordAsync(int id, bool isMain) {
            return base.Channel.DeleteWordAsync(id, isMain);
        }
        
        public void MoveFromSuggestions(int id) {
            base.Channel.MoveFromSuggestions(id);
        }
        
        public System.Threading.Tasks.Task MoveFromSuggestionsAsync(int id) {
            return base.Channel.MoveFromSuggestionsAsync(id);
        }
        
        public string GetRandomWord() {
            return base.Channel.GetRandomWord();
        }
        
        public System.Threading.Tasks.Task<string> GetRandomWordAsync() {
            return base.Channel.GetRandomWordAsync();
        }
    }
}
